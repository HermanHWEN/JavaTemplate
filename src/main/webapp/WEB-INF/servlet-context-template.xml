<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
    
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- Configure to plugin JSON as request and response in method handler -->
    <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <beans:property name="messageConverters">
            <beans:list>
                <beans:ref bean="jsonMessageConverter"/>
            </beans:list>
        </beans:property>
    </beans:bean>
     
    <!-- Configure bean to convert JSON to POJO and vice versa -->
    <beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    </beans:bean>
	
	<!-- Configure DB password encryption -->
	<beans:bean id="environmentVariablesConfiguration" class="com.hsbc.gbm.ptutilities.common.util.HSBCPBEConfig">
	    <beans:constructor-arg value="ebsrd.properties" />
   		<beans:property name="algorithm" value="PBEWithMD5AndDES" />
   		<beans:property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />
 	</beans:bean>
 
	<beans:bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
   		<beans:property name="config" ref="environmentVariablesConfiguration" />
 	</beans:bean>
 
    <!-- DB properties file encrypted -->
 	<beans:bean id="propertyConfigurer" class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
   		<beans:constructor-arg ref="configurationEncryptor" />
   		<beans:property name="locations">
     		<beans:list>
     			<!-- <beans:value>file:C:/TEMP/db_HRRCWA_Encrypt.properties</beans:value> -->
       			<beans:value>file:/appvol/apps/ebsrd/config/db_eBSRD_Encrypt.properties</beans:value>
     		</beans:list>
   		</beans:property>
 	</beans:bean>
    
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<beans:property name="driverClassName" value="${datasource.driver}" />
		<beans:property name="url" value="${datasource.url}" />
		<beans:property name="username" value="${datasource.username}" />
		<beans:property name="password" value="${dataSource.password}" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<!-- auto scan model to bean -->
		<beans:property name="packagesToScan">
              <beans:value>com.hsbc.gbm.ptutilities.model</beans:value>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	 
	<beans:bean id="authorizedProfileDAO" class="com.hsbc.gbm.ptutilities.dao.AuthorizedProfileDAOImpl">
		<beans:property name="sessionFactory" ref="sessionFactory" />
		<beans:property name="ldapTemplate" ref="ldapTemplate" />
		<beans:property name="ldapAdmDn" value="${LDAP.ADMDN}" />
		<beans:property name="ldapAdmDnGroup" value="${LDAP.ADMDNGroup}" />
		<beans:property name="groupRoleMap">
			<beans:map>
				<beans:entry key="${EBSRD.Admin}" value="eBSRD-Admin" />
				
			</beans:map>
		</beans:property>
	</beans:bean>
	 
	<beans:bean id="adUtil" class="com.hsbc.gbm.ptutilities.common.util.ADUtil">
		<beans:constructor-arg index="0" value="${LDAP.URL}"/>
		<beans:constructor-arg index="1" value="${LDAP.URL_USER}"/>
        <beans:constructor-arg index="2" value="${LDAP.BindAccount}"/>
        <beans:constructor-arg index="3" value="${LDAP.BindPassword}"/>
	</beans:bean>
	
	<context:component-scan base-package="com.hsbc" />
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sessionFactory" />
	</beans:bean>

	<!-- for get the specified bean object-->
	<beans:bean class="com.hsbc.gbm.ptutilities.common.util.ApplicationContextHandler" lazy-init="false"/>
	
	<beans:bean id="objectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
	
	<beans:bean id="loginPage" class="com.hsbc.gbm.ptutilities.common.util.LoginPage">
		<beans:constructor-arg index="0" value="${LOGIN.URL}"/>
	</beans:bean>
	
	<!-- for sending email -->
	<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <beans:property name="host" value="${SMTP.Host}"/> 
        <beans:property name="port" value="${SMTP.Port}"/>
    </beans:bean>
    
    <beans:bean id="mailService" class="com.hsbc.gbm.ptutilities.service.MailService">
    	<beans:property name="mailFrom" value="${eBSRD.MAILFROM}"/> 
    </beans:bean>
    
    <!-- for lock function -->
 	<beans:bean id="lockFunction" class="com.hsbc.gbm.ptutilities.common.util.LockFunction">
		<beans:constructor-arg type="long" index="0" value="${LOCKFUNC.DAY}"/>
		<beans:constructor-arg type="long" index="1" value="${LOCKFUNC.HOUR}"/>
		<beans:constructor-arg type="long" index="2" value="${LOCKFUNC.MIN}"/>
        <beans:constructor-arg type="long" index="3" value="${LOCKFUNC.SEC}"/>
	</beans:bean>
	
<!-- Comment by Ben Liang  during Initiation	
	<beans:bean id="lockAspect" class="com.hsbc.gbm.ptutilities.common.util.LockAspect" />
	
   	<aop:config>
  		<aop:aspect id="lockAsp" ref="lockAspect">
   			<aop:around method="saveOrSubmitCwaRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.CwaServiceImpl.saveCwaRequest(..))" />
   			<aop:around method="saveOrSubmitCwaRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.CwaServiceImpl.submitRequest(..))" />
   			<aop:around method="approveCwaRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.CwaServiceImpl.approveRequest(..))" />
   			<aop:around method="rejectOrcancelCwaRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.CwaServiceImpl.cancelRequest(..))" />
   			<aop:around method="rejectOrcancelCwaRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.CwaServiceImpl.rejectRequest(..))" />
   			
   			<aop:around method="saveOrSubmitHrrRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.HrrServiceImpl.saveHrrRequest(..))" />
   			<aop:around method="saveOrSubmitHrrRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.HrrServiceImpl.submitRequest(..))" />
   			<aop:around method="approveHrrRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.HrrServiceImpl.approveRequest(..))" />
   			<aop:around method="rejectOrcancelHrrRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.HrrServiceImpl.cancelRequest(..))" />
   			<aop:around method="rejectOrcancelHrrRequest" pointcut="execution(* com.hsbc.gbm.ptutilities.service.HrrServiceImpl.rejectRequest(..))" />
  		</aop:aspect>
  	</aop:config> 
-->
</beans:beans>
